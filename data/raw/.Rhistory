ungroup()
# Create a new column DRIVER_ALC for each unique ST_CASE
data <- data %>%
group_by(ST_CASE) %>%
mutate(DRIVER_ALC = ifelse(any(DRINKING == 1 & PER_TYP == 1), 1, 0)) %>%
ungroup()
data <- data %>%
filter(REST_USE != 96) %>%
filter(REST_USE != 98) %>%
filter(REST_USE != 99) %>%
group_by(ST_CASE) %>%
mutate(NUM_SEAT_BLT = sum(REST_USE %in% c(1, 2, 3, 4, 6, 8, 10, 11, 12))) %>%
ungroup()
# Create a new column DRIVER_ALC for each unique ST_CASE
data <- data %>%
group_by(ST_CASE) %>%
mutate(DRIVER_DRUGS = ifelse(any(DRUGS == 1 & PER_TYP == 1), 1, 0)) %>%
ungroup()
# Add a new column to the dataframe to represent the percentage of deaths for each ST_CASE
data <- data %>%
group_by(ST_CASE) %>%
mutate(PCT_DEATH = sum(INJ_SEV == 4) / n()) %>%
ungroup()
# Add a new column to the dataframe to represent the percentage of deaths for each ST_CASE
data <- data %>%
group_by(ST_CASE) %>%
mutate(PCT_INJ_or_DEATH = sum(INJ_SEV %in% c(2, 3, 4)) / n()) %>%
ungroup()
data <- data %>%
filter(REST_USE != 96) %>%
filter(REST_USE != 98) %>%
filter(REST_USE != 99) %>%
filter() %>%
group_by(ST_CASE) %>%
mutate(PCT_SEAT_BLT = sum(REST_USE %in% c(1, 2, 3, 4, 6, 8, 10, 11, 12)) / n()) %>%
ungroup()
data <- data %>%
filter(AIR_BAG != 97) %>%
filter(AIR_BAG != 98) %>%
filter(AIR_BAG != 99) %>%
group_by(ST_CASE) %>%
mutate(PCT_AIR_BAG_DEPL = sum(AIR_BAG %in% c(1, 2, 3, 7, 8, 9)) / n()) %>%
ungroup()
data <- data %>%
filter(AIR_BAG != 97) %>%
filter(AIR_BAG != 98) %>%
filter(AIR_BAG != 99) %>%
group_by(ST_CASE) %>%
mutate(NUM_AIR_BAG = sum(AIR_BAG %in% c(1, 2, 3, 7, 8, 9, 20))) %>%
ungroup()
# Calculate the average age of drivers in each car crash, ignoring AGE = 998
data <- data %>%
filter(AGE != 998) %>%
filter(AGE != 999) %>%
group_by(ST_CASE) %>%
mutate(AVG_DRIVER_AGE = mean(AGE[PER_TYP == 1], na.rm = TRUE)) %>%
ungroup()
# Assuming your dataframe is named df and it contains columns ST_CASE, DEATH, and AVG_DRIVER_AGE
# Create a new dataframe with distinct pairs of ST_CASE, DEATH, and AVG_DRIVER_AGE
new_data <- data %>%
distinct(ST_CASE, PPL_INVOLVED, HOUR, DEATH, PCT_DEATH, NUMBER_OF_INJ_or_DEAD, PCT_INJ_or_DEATH, DRIVER_ALC, DRIVER_DRUGS, NUM_SEAT_BLT, PCT_SEAT_BLT, PCT_AIR_BAG_DEPL, NUM_AIR_BAG, AVG_DRIVER_AGE)
# Filter the dataset to include only rows where PER_TYPE is 1 (representing a driver) and AGE is not NA
drivers_data <- data %>%
filter(PER_TYP == 1 & !is.na(AGE))
# Group the data by ST_CASE and filter out cases where there is at least one row with an age entry
result_df <- drivers_data %>%
group_by(ST_CASE) %>%
filter(any(!is.na(AGE)))
# Select only the AGE and ST_CASE columns
result_df <- result_df %>%
select(ST_CASE, AGE, SEXNAME, RUR_URB, RUR_URBNAME, HARM_EV, HARM_EVNAME, VPICBODYCLASS, VPICBODYCLASSNAME, BODY_TYP, BODY_TYPNAME, GVWR_TO, DRINKING, ALC_RES, DRUGS, FIRE_EXP, FIRE_EXPNAME)
# Assuming you have a dataframe named 'new_data'
# Perform a left join on ST_CASE variable
master_dataframe <- left_join(result_df, new_data, by = "ST_CASE")
master_dataframe <- master_dataframe %>%
rename(WEIGHT_OF_CAR = GVWR_TO)
# Plot NUMBER_OF_INJ_or_DEAD against AVG_DRIVER_AGE, with red points for DRIVER_ALC == 1
ggplot(master_dataframe, aes(x = AGE, y = PCT_INJ_or_DEATH, color = factor(DRIVER_ALC))) +
geom_point() +
scale_color_manual(values = c("0" = "black", "1" = "red")) +
labs(x = "Average Driver Age", y = "Percentage of Injuries and Deaths") +
ggtitle("Percentage of Injuries and Deaths vs. Average Driver Age")
# Plot NUMBER_OF_INJ_or_DEAD against AVG_DRIVER_AGE, with red points for DRIVER_ALC == 1
ggplot(new_data, aes(x = PCT_SEAT_BLT, y = PCT_INJ_or_DEATH)) +
geom_point() +
labs(x = "Percentage of Seatbelts used", y = "Percentage of Injuries or Deaths") +
ggtitle("Percentage of Injuries or Deaths vs. Percentage of Seatbelts used")
# Group the master_data.frame by AGE and calculate the summarized statistics
summary_df <- master_dataframe %>%
group_by(AGE) %>%
summarise(Total_PPL_INVOLVED = sum(PPL_INVOLVED, na.rm = TRUE),
Total_NUMBER_INJ_or_DEATH = sum(NUMBER_OF_INJ_or_DEAD, na.rm = TRUE),
Total_Number_DRIVER_ALC = sum(DRIVER_ALC, na.rm = TRUE)) %>%
mutate(PCT_INJ_or_DEATH = (Total_NUMBER_INJ_or_DEATH / Total_PPL_INVOLVED))
summary_df <- summary_df %>%
select(-Total_PPL_INVOLVED, -Total_NUMBER_INJ_or_DEATH)
# Count the number of seat belt Usage each age group
summary_belt <- master_dataframe %>%
group_by(AGE) %>%
summarize(Pct_Seat_Blt = sum(PCT_SEAT_BLT)/n())
summary_df <- left_join(summary_df, summary_belt, by = "AGE")
# Count the number of Drug Usage each age group
summary_DRUGS <- master_dataframe %>%
filter(DRUGS == 1) %>%
group_by(AGE) %>%
summarize(DRUGS_Count = n())
summary_df <- left_join(summary_df, summary_DRUGS, by = "AGE")
# Count the number of Alcohol Usage each age group
summary_DRINKING <- master_dataframe %>%
filter(DRINKING == 1) %>%
group_by(AGE) %>%
summarize(DRINKING_Count = n())
summary_df <- left_join(summary_df, summary_DRINKING, by = "AGE")
# Avg hour of crashes for each age group
summary_HOUR <- master_dataframe %>%
group_by(AGE) %>%
summarize(HOUR = sum(HOUR)/n())
summary_df <- left_join(summary_df, summary_HOUR, by = "AGE")
# Avg number of people involved at each age group
summary_NUM_PPL <- master_dataframe %>%
group_by(AGE) %>%
summarize(NUM_PPL_INVOLVED = sum(PPL_INVOLVED)/n())
summary_df <- left_join(summary_df, summary_NUM_PPL, by = "AGE")
# Count the number of males and females in each age group
summary_male <- master_dataframe %>%
filter(SEXNAME == "Male") %>%
group_by(AGE) %>%
summarize(Male_Count = n())
summary_female <- master_dataframe %>%
filter(SEXNAME == "Female") %>%
group_by(AGE) %>%
summarize(Female_Count = n())
summary_df <- left_join(summary_df, summary_male, by = "AGE")
summary_df <- left_join(summary_df, summary_female, by = "AGE")
# Count the number of accidents each age group was involved in in either rural or urban areas
summary_RUR <- master_dataframe %>%
filter(RUR_URB == 1) %>%
group_by(AGE) %>%
summarize(RUR_Count = n())
summary_URB <- master_dataframe %>%
filter(RUR_URB == 2) %>%
group_by(AGE) %>%
summarize(URB_Count = n())
summary_HighWay <- master_dataframe %>%
filter(RUR_URB == 6) %>%
group_by(AGE) %>%
summarize(HIGHWAY_Count = n())
summary_df <- left_join(summary_df, summary_RUR, by = "AGE")
summary_df <- left_join(summary_df, summary_URB, by = "AGE")
summary_df <- left_join(summary_df, summary_HighWay, by = "AGE")
unique_harm_ev_names = unique(master_dataframe$HARM_EVNAME)
harm_ev_groupings <- hashmap()
harm_ev_groupings[["Motor Vehicle In-Transport"]] <- "Vehicle_Related_Accident"
harm_ev_groupings[["Rollover/Overturn"]] <- "Vehicle_Related_Accident"
harm_ev_groupings[["Parked Motor Vehicle"]] <- "Vehicle_Related_Accident"
harm_ev_groupings[["Non-Motorist on Personal Conveyance"]] <- "Vehicle_Related_Accident"
harm_ev_groupings[["Motor Vehicle In-Transport Strikes or is Struck by Cargo, Persons or Objects Set-in-Motion from/by Another Motor Vehicle In Transport"]] <- "Vehicle_Related_Accident"
harm_ev_groupings[["Working Motor Vehicle"]] <- "Vehicle_Related_Accident"
harm_ev_groupings[["Fell/Jumped from Vehicle"]] <- "Vehicle_Related_Accident"
harm_ev_groupings[["Road Vehicle on Rails"]] <- "Vehicle_Related_Accident"
harm_ev_groupings[["Injured In Vehicle (Non-Collision)"]] <- "Vehicle_Related_Accident"
harm_ev_groupings[["Tree (Standing Only)"]] <- "Nature_Related_Accident"
harm_ev_groupings[["Ground"]] <- "Nature_Related_Accident"
harm_ev_groupings[["Embankment"]] <- "Nature_Related_Accident"
harm_ev_groupings[["Shrubbery"]] <- "Nature_Related_Accident"
harm_ev_groupings[["Boulder"]] <- "Nature_Related_Accident"
harm_ev_groupings[["Snow Bank"]] <- "Nature_Related_Accident"
harm_ev_groupings[["Concrete Traffic Barrier"]] <- "Infrastructure_Related_Accident"
harm_ev_groupings[["Guardrail Face"]] <- "Infrastructure_Related_Accident"
harm_ev_groupings[["Utility Pole/Light Support"]] <- "Infrastructure_Related_Accident"
harm_ev_groupings[["Traffic Sign Support"]] <- "Infrastructure_Related_Accident"
harm_ev_groupings[["Guardrail End"]] <- "Infrastructure_Related_Accident"
harm_ev_groupings[["Wall"]] <- "Infrastructure_Related_Accident"
harm_ev_groupings[["Bridge Rail (Includes parapet)"]] <- "Infrastructure_Related_Accident"
harm_ev_groupings[["Bridge Pier or Support"]] <- "Infrastructure_Related_Accident"
harm_ev_groupings[["Cable Barrier"]] <- "Infrastructure_Related_Accident"
harm_ev_groupings[["Traffic Signal Support"]] <- "Infrastructure_Related_Accident"
harm_ev_groupings[["Impact Attenuator/Crash Cushion"]] <- "Infrastructure_Related_Accident"
harm_ev_groupings[["Post, Pole or Other Supports"]] <- "Infrastructure_Related_Accident"
harm_ev_groupings[["Other Traffic Barrier"]] <- "Infrastructure_Related_Accident"
harm_ev_groupings[["Other Fixed Object"]] <- "Infrastructure_Related_Accident"
harm_ev_groupings[["Unknown Fixed Object"]] <- "Infrastructure_Related_Accident"
harm_ev_groupings[["Bridge Overhead Structure"]] <- "Infrastructure_Related_Accident"
harm_ev_groupings[["Pedestrian"]] <- "Living_Entities_Accident"
harm_ev_groupings[["Live Animal"]] <- "Living_Entities_Accident"
harm_ev_groupings[["Pedalcyclist"]] <- "Living_Entities_Accident"
harm_ev_groupings[["Ridden Animal or Animal Drawn Conveyance"]] <- "Living_Entities_Accident"
harm_ev_groupings[["Ditch"]] <- "Other_Accident"
harm_ev_groupings[["Mail Box"]] <- "Other_Accident"
harm_ev_groupings[["Culvert"]] <- "Other_Accident"
harm_ev_groupings[["Fence"]] <- "Other_Accident"
harm_ev_groupings[["Building"]] <- "Other_Accident"
harm_ev_groupings[["Other Object (not fixed)"]] <- "Other_Accident"
harm_ev_groupings[["Other Non-Collision"]] <- "Other_Accident"
harm_ev_groupings[["Cargo/Equipment Loss, Shift, or Damage [harmful]"]] <- "Other_Accident"
harm_ev_groupings[["Unknown Object Not Fixed"]] <- "Other_Accident"
harm_ev_groupings[["Thrown or Falling Object"]] <- "Other_Accident"
harm_ev_groupings[["Fire/Explosion"]] <- "Other_Accident"
harm_ev_groupings[["Fire Hydrant"]] <- "Other_Accident"
harm_ev_groupings[["Pavement Surface Irregularity (Ruts, Potholes, Grates, etc.)"]] <- "Other_Accident"
harm_ev_groupings[["Harmful Event, Details Not Reported"]] <- "Other_Accident"
summary_df$Vehicle_Related_Accident <- NA
summary_df$Nature_Related_Accident <- NA
summary_df$Infrastructure_Related_Accident <- NA
summary_df$Living_Entities_Accident <- NA
summary_df$Other_Accident <- NA
for (i in seq_along(unique_harm_ev_names)) {
if(harm_ev_groupings[unique_harm_ev_names[i]] == "Vehicle_Related_Accident"){
cat("Vehicle_Related_Accident", unique_harm_ev_names[i], "\n")
temp <- master_dataframe %>%
filter(HARM_EVNAME == unique_harm_ev_names[i]) %>%
group_by(AGE) %>%
summarize(new_col= n())
# Full join based on AGE and add the values
summary_df <- full_join(summary_df, temp, by = "AGE") %>%
mutate(Vehicle_Related_Accident = coalesce(Vehicle_Related_Accident, 0) + coalesce(new_col, 0))
summary_df <- summary_df %>%
select(-new_col)
} else if(harm_ev_groupings[unique_harm_ev_names[i]] == "Nature_Related_Accident") {
cat("Nature_Related_Accident", unique_harm_ev_names[i], "\n")
temp <- master_dataframe %>%
filter(HARM_EVNAME == unique_harm_ev_names[i]) %>%
group_by(AGE) %>%
summarize(new_col= n())
# Full join based on AGE and add the values
summary_df <- full_join(summary_df, temp, by = "AGE") %>%
mutate(Nature_Related_Accident = coalesce(Nature_Related_Accident, 0) + coalesce(new_col, 0))
summary_df <- summary_df %>%
select(-new_col)
} else if(harm_ev_groupings[unique_harm_ev_names[i]] == "Infrastructure_Related_Accident") {
cat("Infrastructure_Related_Accident", unique_harm_ev_names[i], "\n")
temp <- master_dataframe %>%
filter(HARM_EVNAME == unique_harm_ev_names[i]) %>%
group_by(AGE) %>%
summarize(new_col = n())
# Full join based on AGE and add the values
summary_df <- full_join(summary_df, temp, by = "AGE") %>%
mutate(Infrastructure_Related_Accident = coalesce(Infrastructure_Related_Accident, 0) + coalesce(new_col, 0))
summary_df <- summary_df %>%
select(-new_col)
} else if(harm_ev_groupings[unique_harm_ev_names[i]] == "Living_Entities_Accident") {
cat("Living_Entities_Accident", unique_harm_ev_names[i], "\n")
temp <- master_dataframe %>%
filter(HARM_EVNAME == unique_harm_ev_names[i]) %>%
group_by(AGE) %>%
summarize(new_col = n())
# Full join based on AGE and add the values
summary_df <- full_join(summary_df, temp, by = "AGE") %>%
mutate(Living_Entities_Accident = coalesce(Living_Entities_Accident, 0) + coalesce(new_col, 0))
summary_df <- summary_df %>%
select(-new_col)
} else if(harm_ev_groupings[unique_harm_ev_names[i]] == "Other_Accident") {
cat("Other_Accident", unique_harm_ev_names[i], "\n")
temp <- master_dataframe %>%
filter(HARM_EVNAME == unique_harm_ev_names[i]) %>%
group_by(AGE) %>%
summarize(new_col = n())
# Full join based on AGE and add the values
summary_df <- full_join(summary_df, temp, by = "AGE") %>%
mutate(Other_Accident = coalesce(Other_Accident, 0) + coalesce(new_col, 0))
summary_df <- summary_df %>%
select(-new_col)
}
}
vehicle_types <- hashmap()
vehicle_types[["Sedan/Saloon"]] <- "Passenger_Cars"
vehicle_types[["Hatchback/Liftback/Notchback"]] <- "Passenger_Cars"
vehicle_types[["Coupe"]] <- "Passenger_Cars"
vehicle_types[["Convertible/Cabriolet"]] <- "Passenger_Cars"
vehicle_types[["Roadster"]] <- "Passenger_Cars"
vehicle_types[["Wagon"]] <- "Passenger_Cars"
vehicle_types[["Sport Utility Vehicle (SUV)/Multi-Purpose Vehicle (MPV)"]] <- "Sport Utility Vehicles (SUVs) and Crossovers"
vehicle_types[["Crossover Utility Vehicle (CUV)"]] <- "Sport Utility Vehicles (SUVs) and Crossovers"
vehicle_types[["Sport Utility Truck (SUT)"]] <- "Sport Utility Vehicles (SUVs) and Crossovers"
vehicle_types[["Pickup"]] <- "Trucks and Vans"
vehicle_types[["Truck-Tractor"]] <- "Trucks and Vans"
vehicle_types[["Truck"]] <- "Trucks and Vans"
vehicle_types[["Cargo Van"]] <- "Trucks and Vans"
vehicle_types[["Step Van / Walk-in Van"]] <- "Trucks and Vans"
vehicle_types[["Motorcycle - Sport"]] <- "Motorcycles"
vehicle_types[["Motorcycle - Dual Sport / Adventure / Supermoto / On/Off-road"]] <- "Motorcycles"
vehicle_types[["Motorcycle - Touring / Sport Touring"]] <- "Motorcycles"
vehicle_types[["Motorcycle - Cruiser"]] <- "Motorcycles"
vehicle_types[["Motorcycle - Custom"]] <- "Motorcycles"
vehicle_types[["Motorcycle - Unknown Body Class"]] <- "Motorcycles"
vehicle_types[["Motorcycle - Street"]] <- "Motorcycles"
vehicle_types[["Motorcycle - Standard"]] <- "Motorcycles"
vehicle_types[["Motorcycle - Trike"]] <- "Motorcycles"
vehicle_types[["Motorcycle - Unenclosed Three Wheeled / Open Autocycle"]] <- "Motorcycles"
vehicle_types[["Motorcycle - Trike"]] <- "Motorcycles"
vehicle_types[["Motorcycle - Scooter"]] <- "Motorcycles"
vehicle_types[["Motorcycle - Moped"]] <- "Motorcycles"
vehicle_types[["Motorcycle - Underbone"]] <- "Motorcycles"
vehicle_types[["Motorcycle - Small / Minibike"]] <- "Motorcycles"
vehicle_types[["Motorcycle - Competition"]] <- "Motorcycles"
vehicle_types[["Off-road Vehicle - Farm Equipment"]] <- "Off-road Vehicles"
vehicle_types[["Off-road Vehicle - Recreational Off-Road Vehicle (ROV)"]] <- "Off-road Vehicles"
vehicle_types[["Off-road Vehicle - All Terrain Vehicle (ATV) (Motorcycle-style)"]] <- "Off-road Vehicles"
vehicle_types[["Off-road Vehicle - Dirt Bike / Off-Road"]] <- "Off-road Vehicles"
vehicle_types[["Off-road Vehicle - Motocross (Off-road short distance, closed track racing)"]] <- "Off-road Vehicles"
vehicle_types[["Off-road Vehicle - Construction Equipment"]] <- "Off-road Vehicles"
vehicle_types[["Off-road Vehicle - Golf Cart"]] <- "Off-road Vehicles"
vehicle_types[["Off-road Vehicle - Snowmobile"]] <- "Off-road Vehicles"
vehicle_types[["Off-road Vehicle - Enduro (Off-road long distance racing)"]] <- "Off-road Vehicles"
vehicle_types[["Motorized Bicycle"]] <- "Special Purpose Vehicles"
vehicle_types[["Fire Apparatus"]] <- "Special Purpose Vehicles"
vehicle_types[["Limousine"]] <- "Special Purpose Vehicles"
vehicle_types[["Low Speed Vehicle (LSV) / Neighborhood Electric Vehicle (NEV)"]] <- "Special Purpose Vehicles"
vehicle_types[["Motorhome"]] <- "Special Purpose Vehicles"
vehicle_types[["Bus"]] <- "Special Purpose Vehicles"
vehicle_types[["Bus - School Bus"]] <- "Special Purpose Vehicles"
vehicle_types[["Incomplete"]] <- "Special Purpose Vehicles"
vehicle_types[["Incomplete - Motor Home Chassis"]] <- "Special Purpose Vehicles"
vehicle_types[["Incomplete - Glider"]] <- "Special Purpose Vehicles"
vehicle_types[["Incomplete - Chassis Cab (Single Cab)"]] <- "Special Purpose Vehicles"
vehicle_types[["Incomplete - Chassis Cab (Number of Cab Unknown)"]] <- "Special Purpose Vehicles"
vehicle_types[["Incomplete - Stripped Chassis"]] <- "Special Purpose Vehicles"
vehicle_types[["Incomplete - Chassis Cab (Double Cab)"]] <- "Special Purpose Vehicles"
vehicle_types[["Incomplete - Cutaway"]] <- "Special Purpose Vehicles"
vehicle_types[["Incomplete - Bus Chassis"]] <- "Special Purpose Vehicles"
vehicle_types[["Incomplete - Commercial Chassis"]] <- "Special Purpose Vehicles"
vehicle_types[["Incomplete - Commercial Bus Chassis"]] <- "Special Purpose Vehicles"
vehicle_types[["Incomplete - School Bus Chassis"]] <- "Special Purpose Vehicles"
vehicle_types[["Other"]] <- "Others"
vehicle_types[["Unknown"]] <- "Others"
vehicle_types[["Not Reported"]] <- "Others"
summary_df$Passenger_Cars <- NA
summary_df$Trucks_and_Vans <- NA
summary_df$Motorcycles <- NA
summary_df$Off_Road_Vehicles <- NA
summary_df$Special_Purpose_Vehicles <- NA
summary_df$Others <- NA
unique_vehicle_body_names = unique(master_dataframe$VPICBODYCLASSNAME)
for (i in seq_along(unique_vehicle_body_names)) {
if(vehicle_types[unique_vehicle_body_names[i]] == "Passenger_Cars"){
cat("Passenger_Cars", unique_vehicle_body_names[i], "\n")
temp <- master_dataframe %>%
filter(VPICBODYCLASSNAME == unique_vehicle_body_names[i]) %>%
group_by(AGE) %>%
summarize(new_col= n())
# Full join based on AGE and add the values
summary_df <- full_join(summary_df, temp, by = "AGE") %>%
mutate(Passenger_Cars = coalesce(Passenger_Cars, 0) + coalesce(new_col, 0))
summary_df <- summary_df %>%
select(-new_col)
} else if(vehicle_types[unique_vehicle_body_names[i]] == "Trucks and Vans") {
cat("Trucks_and_Vans", unique_vehicle_body_names[i], "\n")
temp <- master_dataframe %>%
filter(VPICBODYCLASSNAME == unique_vehicle_body_names[i]) %>%
group_by(AGE) %>%
summarize(new_col= n())
# Full join based on AGE and add the values
summary_df <- full_join(summary_df, temp, by = "AGE") %>%
mutate(Trucks_and_Vans = coalesce(Trucks_and_Vans, 0) + coalesce(new_col, 0))
summary_df <- summary_df %>%
select(-new_col)
} else if(vehicle_types[unique_vehicle_body_names[i]] == "Motorcycles") {
cat("Motorcycles", unique_vehicle_body_names[i], "\n")
temp <- master_dataframe %>%
filter(VPICBODYCLASSNAME == unique_vehicle_body_names[i]) %>%
group_by(AGE) %>%
summarize(new_col= n())
# Full join based on AGE and add the values
summary_df <- full_join(summary_df, temp, by = "AGE") %>%
mutate(Motorcycles = coalesce(Motorcycles, 0) + coalesce(new_col, 0))
summary_df <- summary_df %>%
select(-new_col)
} else if(vehicle_types[unique_vehicle_body_names[i]] == "Off-road Vehicles") {
cat("Off_Road_Vehicles", unique_vehicle_body_names[i], "\n")
temp <- master_dataframe %>%
filter(VPICBODYCLASSNAME == unique_vehicle_body_names[i]) %>%
group_by(AGE) %>%
summarize(new_col= n())
# Full join based on AGE and add the values
summary_df <- full_join(summary_df, temp, by = "AGE") %>%
mutate(Off_Road_Vehicles = coalesce(Off_Road_Vehicles, 0) + coalesce(new_col, 0))
summary_df <- summary_df %>%
select(-new_col)
} else if(vehicle_types[unique_vehicle_body_names[i]] == "Special Purpose Vehicles") {
cat("Special_Purpose_Vehicles", unique_vehicle_body_names[i], "\n")
temp <- master_dataframe %>%
filter(VPICBODYCLASSNAME == unique_vehicle_body_names[i]) %>%
group_by(AGE) %>%
summarize(new_col= n())
# Full join based on AGE and add the values
summary_df <- full_join(summary_df, temp, by = "AGE") %>%
mutate(Special_Purpose_Vehicles = coalesce(Special_Purpose_Vehicles, 0) + coalesce(new_col, 0))
summary_df <- summary_df %>%
select(-new_col)
} else if(vehicle_types[unique_vehicle_body_names[i]] == "Others") {
cat("Others", unique_vehicle_body_names[i], "\n")
temp <- master_dataframe %>%
filter(VPICBODYCLASSNAME == unique_vehicle_body_names[i]) %>%
group_by(AGE) %>%
summarize(new_col= n())
# Full join based on AGE and add the values
summary_df <- full_join(summary_df, temp, by = "AGE") %>%
mutate(Others = coalesce(Others, 0) + coalesce(new_col, 0))
summary_df <- summary_df %>%
select(-new_col)
}
}
summary_df[is.na(summary_df)] <- 0
# View the summary data.frame
print(summary_df)
# Plot Age against Percentage_INJ_or_DEATH
ggplot(summary_df, aes(x = AGE, y = PCT_INJ_or_DEATH)) +
geom_line() +
geom_point() +
labs(x = "Age", y = "Percentage of Injuries or Deaths") +
ggtitle("Age vs. Percentage of Injuries or Deaths")
# Calculate the sum of Male_Count and Female_Count for each row
summary_df$Total_num_drivers <- rowSums(summary_df[c("Male_Count", "Female_Count")])
# Print the updated dataframe
print(summary_df)
# Assuming Total_Number_Driver_Alc and Total_num_drivers columns already exist in summary_df
# Create a new column Pct_Driver_Alc
summary_df$Pct_Driver_Alc <- summary_df$Total_Number_DRIVER_ALC/ summary_df$Total_num_drivers * 100
# Create a new column Pct_Driver_Alc
summary_df$Pct_Male <- summary_df$Male_Count / summary_df$Total_num_drivers * 100
# Create a new column Pct_Driver_Alc
summary_df$Pct_Female <- summary_df$Female_Count / summary_df$Total_num_drivers * 100
# Create a new column Pct_Driver_Alc
summary_df$Pct_RUR <- summary_df$RUR_Count / summary_df$Total_num_drivers * 100
# Create a new column Pct_Driver_Alc
summary_df$Pct_URB <- summary_df$URB_Count / summary_df$Total_num_drivers * 100
# Create a new column Pct_Driver_Alc
summary_df$Pct_Highway <- summary_df$HIGHWAY_Count / summary_df$Total_num_drivers * 100
# Create a new column Pct_Driver_Alc
summary_df$Pct_Vehicle_Rel_Acc <- summary_df$Vehicle_Related_Accident / summary_df$Total_num_drivers * 100
# Create a new column Pct_Driver_Alc
summary_df$Pct_Nature_Rel_Acc <- summary_df$Nature_Related_Accident / summary_df$Total_num_drivers * 100
# Create a new column Pct_Driver_Alc
summary_df$Pct_Inf_Rel_Acc <- summary_df$Infrastructure_Related_Accident / summary_df$Total_num_drivers * 100
# Create a new column Pct_Driver_Alc
summary_df$Pct_Liv_Ent_Acc <- summary_df$Living_Entities_Accident / summary_df$Total_num_drivers * 100
# Create a new column Pct_Driver_Alc
summary_df$Pct_Oth_Acc <- summary_df$Other_Accident / summary_df$Total_num_drivers * 100
# Create a new column Pct_Driver_Alc
summary_df$Pct_Passenger_Cars <- summary_df$Passenger_Cars / summary_df$Total_num_drivers * 100
# Create a new column Pct_Driver_Alc
summary_df$Pct_Trucks_and_Vans <- summary_df$Trucks_and_Vans / summary_df$Total_num_drivers * 100
# Create a new column Pct_Driver_Alc
summary_df$Pct_Motorcycles <- summary_df$Motorcycles / summary_df$Total_num_drivers * 100
# Create a new column Pct_Driver_Alc
summary_df$Pct_Offroad_Vehicles <- summary_df$Off_Road_Vehicles / summary_df$Total_num_drivers * 100
# Create a new column Pct_Driver_Alc
summary_df$Pct_Other_Vehicles <- summary_df$Others / summary_df$Total_num_drivers * 100
# Print the updated dataframe
print(summary_df)
cleaned_df <- summary_df %>%
filter(AGE >= 15 & AGE <= 97)
#Draw two plots next to each other
par(mfrow = c(1, 2))
#Draw the histogram
hist(cleaned_df$PCT_INJ_or_DEATH, main = "Distribution of brain_wt")
#Draw the Q-Q plot
qqnorm(cleaned_df$PCT_INJ_or_DEATH)
qqline(cleaned_df$PCT_INJ_or_DEATH, col = "blue", lwd = 2)
# Plot Age against Percentage_INJ_or_DEATH
ggplot(cleaned_df, aes(x = AGE, y = PCT_INJ_or_DEATH)) +
geom_line() +
geom_point() +
labs(x = "Age", y = "Percentage of Injuries or Deaths") +
ggtitle("Age vs. Percentage of Injuries or Deaths")
rm(list=ls())
library(tidyverse)
library(wooldridge)
library(car)
library(lmtest)
library(sandwich)
library(stargazer)
library(ggplot2)
library(dplyr)
library(r2r)
setwd("../data/raw")
setwd("../data/raw")
setwd("../data/raw")
rm(list=ls())
library(tidyverse)
library(wooldridge)
library(car)
library(lmtest)
library(sandwich)
library(stargazer)
library(ggplot2)
library(dplyr)
library(r2r)
setwd("../data/raw")
setwd("../data/raw/")
setwd("../data/external")
setwd("../data/raw")
setwd("C:/Users/siddi/OneDrive/Desktop/lab-2-bill-s_ice_cream_store")
rm(list=ls())
library(tidyverse)
library(wooldridge)
library(car)
library(lmtest)
library(sandwich)
library(stargazer)
library(ggplot2)
library(dplyr)
library(r2r)
setwd("../data/raw")
setwd("C:/Users/siddi/OneDrive/Desktop/lab-2-bill-s_ice_cream_store/data/raw")
setwd("../data/raw")
setwd("../data/raw")
# setwd("../data/raw")
data <- read.csv("person.csv")
setwd("../../data/raw")
data <- read.csv("person.csv")
glimpse(data)
